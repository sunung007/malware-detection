##########
# Import #
##########
import sys
import joblib
import argparse
import numpy as np

# util
sys.path.insert(0, "./../")
from util import *


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--exe", type=str, required=True, help="path of exe to classify"
    )

    args = parser.parse_args()
    path = args.exe

    ######################################

    codes = disassemble_exe(path)
    str_codes = byte_to_opcodes_naive(codes)
    str_codes = [i for i in str_codes]

    # feature vector
    fvector = Fvector()
    basic_blocks = fvector.split_to_basic_block(str_codes)
    hashset = fvector.make_hashset(basic_blocks)
    hasher = FeatureHasher(n_features=4098)
    feature_vector = hasher.transform([dict(Counter(hashset))]).toarray()

    ######################################

    # random forest
    model = joblib.load(f"{MAIN_DIR}/model/random_forest.joblib")
    predict = model.predict_proba(feature_vector)[0] * 100
    print(
        "Random forest: ",
        predict[np.argmax(predict)],
        "% 확률로 Random Forest",
        "정상" if np.argmax(predict) == 0 else "악성",
    )

    # DNN
    model = load_model(
        f"{MAIN_DIR}/model/dnn.kfold.model", custom_objects={"custom_f1": custom_f1}
    )
    predict = ((model.predict(feature_vector) - 0.5) * 2 * 100)[0, 0]
    print("DNN: ", np.abs(predict), "% 확률로 DNN", "정상" if predict < 0 else "악성")

    # CNN
    model = load_model(
        f"{MAIN_DIR}/model/cnn.kfold.model", custom_objects={"custom_f1": custom_f1}
    )
    predict = ((model.predict(feature_vector) - 0.5) * 2 * 100)[0, 0]
    print("CNN: ", np.abs(predict), "% 확률로 CNN", "정상" if predict < 0 else "악성")
