##########
# Import #
##########
import sys
import joblib
import argparse
import numpy as np

# util
sys.path.insert(0, "./../")
from util import *


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--exe", type=str, required=True, help="path of exe to classify"
    )
    parser.add_argument(
        "--fvlen",
        type=int,
        default=4098,
        help="length of feature vector. This value should be same as the value when the model is constructed. Default is 4098.",
    )
    parser.add_argument(
        "--model",
        type=str,
        default="all",
        help="model to use for classification. The value can be one of ['all', 'rf', 'dnn', 'cnn'] and default is 'all'.",
    )
    parser.add_argument(
        "--capstone",
        type=lambda s: s == "True",
        default="True",
        help="Whether to use capstone library for changing byte code to string opcode. Default is True",
    )

    ######################################

    args = parser.parse_args()
    path = args.exe
    fvlen = args.fvlen
    model = args.model
    use_capstone = args.capstone

    if not os.path.isfile(path):
        print(f"There is not such file '{path}'")
        raise ValueError
    if model not in ["all", "rf", "dnn", "cnn"]:
        print(f"Invalid model type '{model}'", file=sys.stderr)
        raise ValueError

    ######################################

    codes = disassemble_exe(path)
    if use_capstone:
        print("Use capstone library")
        str_codes = byte_to_opcodes_capstone(codes)
    else:
        print("Use naive method")
        str_codes = byte_to_opcodes_naive(codes)
    str_codes = [i for i in str_codes]

    # feature vector
    fvector = Fvector()
    basic_blocks = fvector.split_to_basic_block(str_codes)
    hashset = fvector.make_hashset(basic_blocks)
    feature_vector = fvector.feature_hashing([hashset], fvlen)

    ######################################

    # random forest
    if model == "all" or model == "rf":
        rf_model = joblib.load(f"{MAIN_DIR}/model/random_forest.joblib")
        predict = rf_model.predict_proba(feature_vector)[0] * 100
        print(
            "Random forest: ",
            predict[np.argmax(predict)],
            "% 확률로",
            "정상" if np.argmax(predict) == 0 else "악성",
        )

    # DNN
    if model == "all" or model == "dnn":
        dnn_model = load_model(
            f"{MAIN_DIR}/model/dnn.kfold.model", custom_objects={"custom_f1": custom_f1}
        )
        predict = ((dnn_model.predict(feature_vector) - 0.5) * 2 * 100)[0, 0]
        print("DNN: ", np.abs(predict), "% 확률로", "정상" if predict < 0 else "악성")

    # CNN
    if model == "all" or model == "cnn":
        cnn_model = load_model(
            f"{MAIN_DIR}/model/cnn.kfold.model", custom_objects={"custom_f1": custom_f1}
        )
        predict = ((cnn_model.predict(feature_vector) - 0.5) * 2 * 100)[0, 0]
        print("CNN: ", np.abs(predict), "% 확률로", "정상" if predict < 0 else "악성")
