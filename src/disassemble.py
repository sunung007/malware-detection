import sys
from typing import Union
from capstone import *


def byte_to_opcodes(code: Union[bytes, str, list], mode: int = 32) -> list:
    """
    Change byte opcode to string opcode

    Params
    ------
    - code(bytes | str | list) : Codes to change.
        - This type should be bytes, string or 1d-array.
        - Example : '0x8d 0x5 0xf9 0x3d 0x3 0x0 0xc3 0xcc 0xcc 0xcc 0xcc 0xcc 0xcc 0xcc 0xcc 0x48 0x89 0x54 0x24'
    - mode(int) : Bit mode in x86. Avaliable values are 32 or 64.

    Returns
    -------
    - list : Sequence of string opcode(string list)

    """

    if type(code) == list:
        code = " ".join(code)
    if type(code) != bytes:
        code = code.lower()
        code = bytes(code, "utf-8")

    if mode == 32:
        md = Cs(CS_ARCH_X86, CS_MODE_32)
    elif mode == 64:
        md = Cs(CS_ARCH_X86, CS_MODE_64)
    else:
        print("Invalid mode", file=sys.stderr)
        exit(-1)

    return [mnemonic for (_, _, mnemonic, _) in md.disasm_lite(code, 0x1000)]
