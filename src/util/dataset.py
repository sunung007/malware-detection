##########
# Import #
##########
import os
import sys
import gdown
import zipfile

import numpy as np
import pandas as pd

from tqdm import tqdm

###############
# Import Util #
###############
sys.path.insert(0, "./../")
from util import *


#############
# Functions #
#############
def download_dataset(
    save_dir: str = f"{MAIN_DIR}/data", save_name: str = "total_data"
) -> None:
    print("Download all datasets")

    # create
    if not os.path.isdir(save_dir):
        os.mkdir(save_dir)
    if not os.path.isdir(f"{save_dir}/{save_name}"):
        os.mkdir(f"{save_dir}/{save_name}")

    zip_path = os.path.join(save_dir, save_name + ".zip")
    output_path = os.path.join(save_dir, save_name)

    # download
    gdown.download(id=DATASET_GID, output=zip_path, quiet=False)
    # unzip
    zipfile.ZipFile(zip_path).extractall(output_path)
    # delete zip file
    os.remove(zip_path)

    print(
        f"""
    Complete downloading datasets
        - save in {output_path}
    """
    )


def read_opcodes(path: str, is_malware: bool) -> pd.DataFrame:
    def only_one(path: str) -> list:
        fname = os.path.splitext(os.path.split(path)[1])[0]
        while len(os.path.splitext(fname)[1]) > 1:
            fname = os.path.splitext(fname)[0]
        with open(path) as file:
            return [
                fname,  # hashed name
                [i.strip().lower() for i in file.readlines()],  # opcodes
                1 if is_malware else 0,  # is malware
            ]

    if os.path.isdir(path):
        result = []
        filelist = sorted(os.listdir(path))
        for i in tqdm(
            range(len(filelist)), desc=f"read {'malware' if is_malware else 'normal'}"
        ):
            ipath = os.path.join(path, filelist[i])
            if os.path.isfile(ipath):
                result.append(only_one(ipath))
            else:
                print(
                    f"Path to read should not hierarchical : '{ipath}'",
                    file=sys.stderr,
                )
        return pd.DataFrame(result, columns=["name", "opcodes", "isMalware"])

    elif os.path.isfile(path):
        return pd.DataFrame([only_one(path)], columns=["name", "opcodes", "isMalware"])


def download_and_read_dataset():
    download_dataset()
    return pd.concat(
        [
            read_opcodes(f"{MAIN_DIR}/data/total_data/0", False),
            read_opcodes(f"{MAIN_DIR}/data/total_data/1", True),
        ]
    ).reset_index(drop=True)


########
# Main #
########
if __name__ == "__main__":
    download_dataset()
